{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red252\green49\blue17;\red0\green0\blue0;
\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c29020\c6667;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13520\viewh13900\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Recherche\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Recherchiert und diskutiert gemeinsam, um die folgenden Fragen zu beantworten.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Was ist ein Mock und warum ist Mocking in der Softwareentwicklung wichtig?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Gebt Beispiele, warum Mocking in Tests verwendet wird.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Mock: eine Simulation eines realen Objekts, Zweck: Isolation der zu testenden Objekte/Methoden; Testen von gesch\'fctzten Daten\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Mockito haben wir heute kennengelernt.\
\pard\tx220\tx720\tx1440\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Welche anderen Mocking-Frameworks gibt es noch?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
f\'fcr Java: JMockit, Easymock, PowerMock; Es gibt auch Testing Frameworks, die direkt das "mocken" unterst\'fctzen (z.B. Spock)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Warum sollte die zu testende Klasse in Unit-Tests nicht selbst gemockt werden?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Was sind m\'f6gliche Probleme, wenn dies dennoch geschieht?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}\expnd0\expndtw0\kerning0
Es w\'fcrde nur eine Simulation getestet werden. Es wird nur der Methodenaufruf getestet.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Aufgabe: Mocking in Unit Tests\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 In dieser Aufgabe werdet ihr das Gelernte anwenden, um Unit-Tests f\'fcr einen Service zu schreiben.\
{\field{\*\fldinst{HYPERLINK "https://github.com/Flooooooooooorian/ffm-java-23-1-servies"}}{\fldrslt https://github.com/Flooooooooooorian/ffm-java-23-1-servies}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erstelle Unit-Tests f\'fcr die\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}
\f2\fs26 \expnd0\expndtw0\kerning0
findAllProducts
\f1\fs32  Methode,\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
findById
\f1\fs32  Methode,\
\ls2\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
updateProduct
\f1\fs32  Methode,\
\ls2\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
deleteProduct
\f1\fs32 Methode\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
des ProductService. Verwendet dabei Mockito, um die Abh\'e4ngigkeit zum ProductRepository zu mocken.\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Aufgabe Id-Generierung
\f1\b0\fs32 \cf0 \cb2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erstelle eine 
\f2\fs26 IdService
\f1\fs32 -Klasse, in der du eine Methode bereitstellst um eine zuf\'e4llige Id zu generieren.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Nutze diese Klasse im ProductService um die Id f\'fcr ein neues Produkt zu erstellen. (Nutze Dependency Injection)\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erstelle einen Unit-Test f\'fcr die 
\f2\fs26 addProduct
\f1\fs32  Methode aus dem ProductService, mocke dazu auch den IdService.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Bonus Aufgabe 
\f1\b0\fs32 \cf0 \cb2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Pr\'fcfe in jedem Unit-Test das auch nur einmal die Methode von deinem Mock aufgerufen wurde und auch sonst keine.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Bonus Aufgabe Static Mocking\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 \cb2 Erstelle einen Unit-Test f\'fcr die Klasse 
\f2\fs26 IdService
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Recherchiere dazu wie du den statischen Methoden-Aufrufe 
\f2\fs26 UUID.randomUUID()
\f1\fs32 mocken kannst.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Bonus Aufgabe Datum/ArguementCaptor
\f1\b0\fs32 \cf0 \cb2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erweiter deine Product Klasse um den Zeitpunkt der Erstellung.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Nutze im ProductService die Methode 
\f2\fs26 addProduct
\f1\fs32 , um den aktuellen Zeitpunk festzustellen und mit abzuspeichern.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Passe deinen Unit-Test an und pr\'fcfe das der Erstellzeitpunkt nach dem 01.01.2020 und vor 21Uhr ist. Nutze daf\'fcr den ArgumentCaptor von Mockito {\field{\*\fldinst{HYPERLINK "https://www.baeldung.com/mockito-argumentcaptor"}}{\fldrslt \cf5 \ul \ulc5 Link}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Bonus Aufgabe Random Product
\f1\b0\fs32 \cf0 \cb2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erstelle im ProductService eine Methode 
\f2\fs26 public void setSeed(long seed)
\f1\fs32 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erstelle eine Methode 
\f2\fs26 getRandomProduct
\f1\fs32  im ProductService, die einen Seed nutzt um ein zuf\'e4lliges Produkt zur\'fcck zu geben.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Schreibe f\'fcr diese Methode einen Unit-Test, setzte dazu den Seed auf einen festen Wert damit jedes mal das geiche Produkt ausgew\'e4hlt wird.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Bonus Aufgabe Ohne Mockito
\f1\b0\fs32 \cf0 \cb2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Schreibe alle deine Tests ohne Mockito.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
}